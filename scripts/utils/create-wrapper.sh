#!/bin/bash

# MCP Server Wrapper Script Generator
# Creates wrapper scripts for custom MCP servers that require environment variables

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

usage() {
    cat << EOF
MCP Server Wrapper Generator

Usage: $0 [OPTIONS]

Options:
    --server=NAME           Server name (e.g., runpod)
    --path=PATH            Path to server executable
    --env-vars=VAR1,VAR2   Environment variables needed
    --output=PATH          Output wrapper script path
    -h, --help             Show this help

Examples:
    $0 --server=runpod --path=/path/to/runpod/build/index.js --env-vars=RUNPOD_API_KEY
    $0 --server=custom --path=/path/to/server.js --env-vars=API_KEY,SECRET_KEY

Environment variables will be prompted interactively if not set.
EOF
}

# Parse arguments
SERVER=""
SERVER_PATH=""
ENV_VARS=()
OUTPUT_PATH=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --server=*)
            SERVER="${1#*=}"
            shift
            ;;
        --path=*)
            SERVER_PATH="${1#*=}"
            shift
            ;;
        --env-vars=*)
            IFS=',' read -ra ENV_VARS <<< "${1#*=}"
            shift
            ;;
        --output=*)
            OUTPUT_PATH="${1#*=}"
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Validate inputs
if [ -z "$SERVER" ] || [ -z "$SERVER_PATH" ]; then
    print_error "Server name and path are required"
    usage
    exit 1
fi

# Set default output path
if [ -z "$OUTPUT_PATH" ]; then
    OUTPUT_PATH="$(dirname "$SERVER_PATH")/${SERVER}-wrapper.sh"
fi

print_info "Creating wrapper script for $SERVER"
print_info "Server path: $SERVER_PATH"
print_info "Output: $OUTPUT_PATH"

# Collect environment variable values
ENV_VALUES=()
for var in "${ENV_VARS[@]}"; do
    # Check if already set
    if [ -n "${!var}" ]; then
        print_success "$var is already set"
        ENV_VALUES+=("$var=\"${!var}\"")
    else
        echo -n "Enter value for $var (or press Enter to skip): "
        read -s value
        echo
        if [ -n "$value" ]; then
            ENV_VALUES+=("$var=\"$value\"")
            print_success "$var configured"
        else
            print_warning "$var skipped - will need to be set manually"
            ENV_VALUES+=("# $var=\"your_${var,,}_here\" # TODO: Set this value")
        fi
    fi
done

# Create wrapper script
cat > "$OUTPUT_PATH" << EOF
#!/bin/bash
# MCP Server Wrapper for $SERVER
# Generated by MCP Server Manager
# This wrapper sets required environment variables and launches the server

# Set environment variables
$(printf '%s\n' "${ENV_VALUES[@]}")

# Launch the MCP server
exec node "$SERVER_PATH" "\$@"
EOF

# Make executable
chmod +x "$OUTPUT_PATH"

print_success "Wrapper script created: $OUTPUT_PATH"
print_info "You can now use this wrapper with Claude Code:"
echo "  claude mcp add $SERVER \"$OUTPUT_PATH\" --scope user"

# Show wrapper content (with sensitive data masked)
echo
print_info "Wrapper script content:"
echo "----------------------------------------"
sed 's/\(.*=\)".*"/\1"***MASKED***"/' "$OUTPUT_PATH"
echo "----------------------------------------"