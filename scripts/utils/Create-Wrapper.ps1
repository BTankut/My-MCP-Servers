# MCP Server Wrapper Script Generator for Windows
# Creates batch/PowerShell wrapper scripts for custom MCP servers

param(
    [Parameter(Mandatory=$true)]
    [string]$Server,
    
    [Parameter(Mandatory=$true)]
    [string]$ServerPath,
    
    [string[]]$EnvVars = @(),
    
    [string]$OutputPath = ""
)

$Green = "Green"
$Red = "Red"
$Yellow = "Yellow"
$Blue = "Blue"

function Write-Info { param($Message) Write-Host "[INFO] $Message" -ForegroundColor $Blue }
function Write-Success { param($Message) Write-Host "[SUCCESS] $Message" -ForegroundColor $Green }
function Write-Warning { param($Message) Write-Host "[WARNING] $Message" -ForegroundColor $Yellow }
function Write-Error { param($Message) Write-Host "[ERROR] $Message" -ForegroundColor $Red }

function Show-Usage {
    @"
MCP Server Wrapper Generator for Windows

Usage: .\Create-Wrapper.ps1 -Server NAME -ServerPath PATH [-EnvVars VAR1,VAR2] [-OutputPath PATH]

Parameters:
    -Server         Server name (e.g., runpod)
    -ServerPath     Path to server executable
    -EnvVars        Environment variables needed (comma-separated)
    -OutputPath     Output wrapper script path (optional)

Examples:
    .\Create-Wrapper.ps1 -Server runpod -ServerPath "C:\path\to\runpod\build\index.js" -EnvVars "RUNPOD_API_KEY"
    .\Create-Wrapper.ps1 -Server custom -ServerPath "C:\path\to\server.js" -EnvVars "API_KEY,SECRET_KEY"
"@
}

if (-not $Server -or -not $ServerPath) {
    Show-Usage
    exit 1
}

# Set default output path
if (-not $OutputPath) {
    $ServerDir = Split-Path -Parent $ServerPath
    $OutputPath = Join-Path $ServerDir "$Server-wrapper.bat"
}

Write-Info "Creating wrapper script for $Server"
Write-Info "Server path: $ServerPath"
Write-Info "Output: $OutputPath"

# Collect environment variable values
$EnvValues = @()
foreach ($Var in $EnvVars) {
    $CurrentValue = [Environment]::GetEnvironmentVariable($Var, "User")
    if ($CurrentValue) {
        Write-Success "$Var is already set"
        $EnvValues += "set $Var=$CurrentValue"
    } else {
        $Value = Read-Host "Enter value for $Var (or press Enter to skip)" -AsSecureString
        if ($Value.Length -gt 0) {
            $PlainValue = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($Value))
            $EnvValues += "set $Var=$PlainValue"
            Write-Success "$Var configured"
        } else {
            Write-Warning "$Var skipped - will need to be set manually"
            $EnvValues += "REM set $Var=your_$($Var.ToLower())_here"
        }
    }
}

# Create wrapper batch script
$WrapperContent = @"
@echo off
REM MCP Server Wrapper for $Server
REM Generated by MCP Server Manager
REM This wrapper sets required environment variables and launches the server

REM Set environment variables
$($EnvValues -join "`n")

REM Launch the MCP server
node "$ServerPath" %*
"@

$WrapperContent | Out-File -FilePath $OutputPath -Encoding ASCII

Write-Success "Wrapper script created: $OutputPath"
Write-Info "You can now use this wrapper with Claude Code:"
Write-Host "  claude mcp add $Server `"$OutputPath`" --scope user"

# Show wrapper content (with sensitive data masked)
Write-Host ""
Write-Info "Wrapper script content:"
Write-Host "----------------------------------------"
$MaskedContent = $WrapperContent -replace '(set \w+=).*', '$1***MASKED***'
Write-Host $MaskedContent
Write-Host "----------------------------------------"